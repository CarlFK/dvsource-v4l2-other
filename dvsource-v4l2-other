#! /usr/bin/python
#
# -*- coding: utf-8 -*-
# vim: set ts=4 sw=4 et sts=4 ai:
#

"""
dvsource-v4l2-other - Video4Linux2 source for DVswitch which supports any device.
"""

import argparse
import atexit
import os
import tempfile
import time
import subprocess
import shutil

subprocess.DEVNULL = file(os.devnull, "rw+")


###############################################################################
# Argument parsing
###############################################################################

parser = argparse.ArgumentParser(add_help=False)
parser.add_argument(
    "-d", "--device", default="/dev/video0",
    help="Video4Linux device to read the input from.")

parser.add_argument(
    "-f", "--format", default="ntsc", choices=["ntsc", "pal"],
    help="Choose DV output format.")
parser.add_argument(
    "-a", "--aspect", default="4:3", choices=["4:3", "16:9"],
    help="Choose DV output aspect ratio.")
parser.add_argument(
    "-t", "--timeout", type=int, default=10,
    help="How long to wait when terminating subprocess before killing.")

fake_types = {
    None: 0,
    "": 0,
    "smpte": 0,
    "snow": 1,
    "black": 2,
    "white": 3,
    "red": 4,
    "green": 5,
    "blue": 6,
    "checkers-1": 7,
    "checkers-2": 8,
    "checkers-4": 9,
    "checkers-8": 10,
    "circular": 11,
    "blink": 12,
    "smpte": 13,
    "zone-plate": 14,
    "gamut": 15,
    "chroma-zone-plate": 16,
    "solid-color": 17,
    "ball": 18,
    "smpte": 19,
    "bar": 20,
    }
parser.add_argument(
    "-n", "--fake", choices=fake_types.keys(),
    help="Use a fake source rather then a real V4L2 device.")

parser.add_argument(
    "-v", "--verbose", action="store_true",
    help="Increase output verbosity")


###############################################################################
# dvswitch arguments and .dvswitchrc parsing
###############################################################################

def parse_dvswitchrc(configfile):
    r = {}
    for line in file(configfile, "r").readlines():
        cmt = line.find('#')
        if cmt > 0:
            line = line[cmt:]

        line = line.strip()
        if not line:
            continue

        key, value = line.split('=', 1)
        r[key] = value
    return r


def get_dvswitchrc():
    import shlex
    from os import path
    configs = [path.expanduser("~"), ".", "/etc"]

    actual_config = {}
    for dirname in configs:
        configfile = path.join(dirname, ".dvswitchrc")
        if path.exists(configfile):
            actual_config.update(parse_dvswitchrc(configfile))

    if actual_config.get("MIXER_HOST", None) == "0.0.0.0":
        actual_config["MIXER_HOST"] = "127.0.0.1"

    return actual_config

config = get_dvswitchrc()
# dvswitch arguments
parser.add_argument(
    "-h", "--host", 
    help=(""
        "Specify the network address on which DVswitch is listening. The host"
        " address may be specified by name or as an IPv4 or IPv6 literal."),
    default = config.get("MIXER_HOST", None),
    required = config.get("MIXER_HOST", None) == None,
    )
parser.add_argument(
    "-p", "--port",
    help=(""
        "Specify the network address on which DVswitch is listening. The host"
        " address may be specified by name or as an IPv4 or IPv6 literal."),
    default = config.get("MIXER_PORT", None),
    required = config.get("MIXER_PORT", None) == None,
    )

###############################################################################

parser.add_argument(
    "--help", action='help',
    help="show this help message and exit")

###############################################################################
# Code to check dependencies
###############################################################################
def check_command(name):
    try:
        output = subprocess.check_output(["which", name])
        if args.verbose:
          print "Using", name, "found at", output.strip()
    except subprocess.CalledProcessError, e:
        print "Unable to find required command:", name
        raise

def check_gst_module(name):
    try:
        subprocess.check_call(["gst-inspect-0.10", name], stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError, e:
        print "Unable to find required gstreamer module", name
        raise

###############################################################################
# Code to which actually does the work
###############################################################################

def launch_gstreamer():
    cmd = ("gst-launch-0.10" +
        " " +
        {True:
            # Read the v4l2 input and decode it if it's a mjpeg input
            "v4l2src ! decodebin2 !",
         False:
          "videotestsrc is-live=true pattern=%s !" % fake_types[args.fake],
        }[args.fake == None] +
        " " +
        # Allow at most 1ms of data to be in the buffer, 2=GST_QUEUE_LEAK_DOWNSTREAM
        "queue leaky=2 max-size-buffers=5 ! " +
        " " +
        # Convert to 4:3 format by adding borders if needed
        {"4:3":
            # Convert to 4:3 format by adding borders if needed
            "videoscale add-borders=1 ! video/x-raw-yuv,width=1024,height=768,pixel-aspect-ratio=\(fraction\)1/1 !",
         "16:9":
            # Convert to 16:9 format by adding borders if needed
            "videoscale add-borders=1 ! video/x-raw-yuv,width=1280,height=720,pixel-aspect-ratio=\(fraction\)1/1 !",
        }[args.aspect] +
        " " +
        "queue ! " +
        " " +
        {"ntsc-4:3": 
            # Convert to 4:3 with non-square pixels
            "videoscale ! video/x-raw-yuv,width=720,height=480,pixel-aspect-ratio=\(fraction\)10/11 !",
         "ntsc-16:9": 
            # Convert to 4:3 with non-square pixels
            "videoscale ! video/x-raw-yuv,width=720,height=480,pixel-aspect-ratio=\(fraction\)40/33 !",
         "pal-4:3":
            # Convert to 4:3 with non-square pixels
            "videoscale ! video/x-raw-yuv,width=720,height=576,pixel-aspect-ratio=\(fraction\)59/54 !",
         "pal-4:3":
            # Convert to 4:3 with non-square pixels
            "videoscale ! video/x-raw-yuv,width=720,height=576,pixel-aspect-ratio=\(fraction\)118/81 !",
        }["%s-%s" % (args.format, args.aspect)] +
        " " +
        "queue ! " +
        " " +
        {"ntsc": 
            # Convert the framerate to 30fps
            "videorate ! video/x-raw-yuv,framerate=\(fraction\)30000/1001 !",
         "pal":
            # Convert the framerate to 25fps
            "videorate ! video/x-raw-yuv,framerate=\(fraction\)25/1 !",
        }[args.format] +
        " " +
        # Convert to DV format
        "ffmpegcolorspace ! ffenc_dvvideo ! ffmux_dv !" +
        " " +
        # Output to the fifo
        "dvswitchsink host=%s port=%s" % (args.host, args.port))

    cmdargs = {}
    if args.verbose:
        print "Running the gstreamer conversion command of"
        print "   ", cmd
    else:
        cmdargs["stdout"] = subprocess.DEVNULL

    return subprocess.Popen(cmd, shell=True, **cmdargs)


###############################################################################
# Main function
###############################################################################
def main():
    # Check that dvsource-file is installed
    check_command("dvsource-file")
    # Check that gstreamer stuff is installed
    check_command("gst-inspect-0.10")
    check_command("gst-launch-0.10")
    check_gst_module("v4l2src")
    check_gst_module("decodebin2")
    check_gst_module("videoscale")
    check_gst_module("videorate")
    check_gst_module("ffmpegcolorspace")
    check_gst_module("ffenc_dvvideo")
    check_gst_module("ffmux_dv")
    check_gst_module("filesink")
    check_gst_module("dvswitchsink")

    # Launch the sub-commands
    gst = launch_gstreamer()

    try:
        while True:
            if gst.poll() != None:
                raise OSError("gst-launch command terminated!")

            # FIXME: Add some type of monitoring of CPU usage here...
            if args.verbose:
                print "gst-launch happily running!"

            time.sleep(1.0)
    finally:
        exitstart = time.time()

        # To not get errors, terminate gst first, then dvsource

        try:
            if args.verbose:
                print "Terminating gst-launch"
            gst.terminate()
        except Exception, e:
            print "Error terminating gst-launch", e

        while True:
            if gst.poll() != None:
                break

            if args.verbose:
                print "Waiting for gst-launch to terminate"
            time.sleep(1)

            if time.time() - exitstart > args.timeout:
                print "Timeout waiting for gst-launch",
                print "to terminate, killing."

		try:
		    gst.kill()
		except Exception, e:
		    print "Error killing gst-launch", e

args = None
if __name__ == "__main__":
    args = parser.parse_args()
    main()
